{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://blog.logancyang.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "http://blog.logancyang.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Flask Full Stack Part 1: Frontend Quick Walkthrough",
            "content": "This is the note for the Flask course by Jose Portilla on Udemy. . 1. Overview . Flask is a super simple Python web framework and is also scalable with a lot of 3rd party libraries. Choosing Flask rather than NodeJS because Python has nice ecosystem in machine learning. What Flask does in general: . Connect with UI | Connect to database and handle CRUD (create, read, update, delete) | . For example, it can handle HTML forms via library WTForms. SQLite is sufficient as a database for a small website. . Flask is a middle man between the frontend UI and the database backend. . We will use Jinja templates to grab information from Python and Flask to send as HTML. . . 2. HTML quick reference . &lt;!DOCTYPE html&gt; tells it’s an html file. &lt;head&gt; contains metadata, title on the tab and links to javascript, &lt;body&gt; contains content such as forms, styles, headers, etc. . 2.1. Basic tags, list, div, span, attribute . &lt;h1&gt;: heading one . &lt;h6&gt;: heading six . &lt;p&gt;: paragraph . &lt;strong&gt;: bold . &lt;em&gt;: italics . &lt;br&gt;: line break . For full reference, go to Mozilla HTML elements reference. . CodePen and JSFiddle are good online test grounds. . &lt;ol&gt;: ordered list . &lt;li&gt;: list item . &lt;ul&gt;: unordered list . Lists can be nested. . &lt;div&gt; stands for division. . &lt;div&gt; and &lt;span&gt; can separate the HTML page into sections. . &lt;div&gt; is for larger division/block of elements, &lt;span&gt; is for substring such as . &lt;p&gt;Here is &lt;span class=&#39;myclass&#39;&gt;some text&lt;/span&gt;. woohoo! &lt;/p&gt; . for doing styling on myclass. . 2.1.1. HTML Attributes . &lt;img src=&quot;&lt;link to image&gt;&quot; alt=&quot;Uh oh! No image&quot;&gt; . &lt;link to image&gt; can be an url online or a path to local file. Next sections will show how to organize static files in Flask. . &lt;a href=&quot;&lt;some url&gt;&quot;&gt;My link here&lt;/a&gt; . Again, &lt;some url&gt; can be an URL online or a path to another html file locally. . Note that &lt;img&gt; is a self closing tag but &lt;a&gt; is not. . 2.2. HTML Forms . Consist of &lt;form&gt; and &lt;input&gt; tags. . Example 1 (from code example Forms Basics) . &lt;form&gt; &lt;h1&gt;Log In&lt;/h1&gt; &lt;h2&gt;Please Input your Password and Email&lt;/h2&gt; &lt;input type=&quot;email&quot; name=&quot;useremail&quot; value=&quot;Email Here&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;Password&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;&quot; value=&quot;Enter&quot;&gt; &lt;h1&gt;Choose a Color!&lt;/h1&gt; &lt;h2&gt;Click on the Button when ready&lt;/h2&gt; &lt;input type=&quot;color&quot; &gt; &lt;h2&gt;Enter some Text!&lt;/h2&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;Text goes here&quot;&gt; &lt;/form&gt; . . The email input type will let the browser check if it’s a valid email with @. value is prefilled. . The password type hides the input in the box. value is what’s prefilled and hidden. . The submit type is a button where value has the text shown on the button. . The color type is interesting but not commonly used, it lets you select from a color palette. . GET will send back the info to our action URL. . POST submits data to be processed. . Forms must set label for each text box in order to let the user see which field is which in the UI. The for in &lt;label&gt; must match the id in &lt;input&gt; to label the input properly. . Example: (from example Form Labels) . &lt;!-- Upon submitting the form will perform the action (a redirect) --&gt; &lt;form action=&quot;http://www.google.com&quot; method=&quot;get&quot;&gt; &lt;label for=&quot;email&quot;&gt;EMAIL:&lt;/label&gt; &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;useremail&quot; value=&quot;Email Here&quot;&gt; &lt;label for=&quot;pass&quot;&gt;PASSWORD:&lt;/label&gt; &lt;input type=&quot;password&quot; id=&quot;pass&quot; name=&quot;password&quot; placeholder=&quot;Password&quot;&gt; &lt;!-- Validation --&gt; &lt;!-- Usually do a lot more validation with Backend--&gt; &lt;!-- Use the attribute: required to require input--&gt; &lt;label for=&quot;userinput&quot;&gt;TEXT:&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;userinput&quot; name=&quot;input&quot; placeholder=&quot;Enter Text Here&quot; required&gt; &lt;input type=&quot;submit&quot; &gt; &lt;/form&gt; . . action is the action that gets triggered upon form submission. Making it an URL is a redirect. . value in the text input type tag is a pre-populated string that is shown in the text input box before typing. It is also the value that actually gets submitted for the field. . placeholder is a hint to the user when the field is empty and it is greyed out. . For type “password”, value is prefilled and hidden, placeholder is a hint without actual filled value and is not hidden. . 2.2.1. Form Selections . When two input radio buttons share the same name, only one can be selected. . Example: (from example form seletions) . &lt;form method=&quot;get&quot;&gt; &lt;h3&gt;Do you already own a dog?&lt;/h3&gt; &lt;label for=&quot;yes&quot;&gt;Yes&lt;/label&gt; &lt;input type=&quot;radio&quot; id=&quot;yes&quot; name=&quot;dog_choice&quot; value=&quot;yes&quot;&gt; &lt;label for=&quot;no&quot;&gt;No:&lt;/label&gt; &lt;input type=&quot;radio&quot; id=&quot;no&quot; name= &quot;dog_choice&quot; value=&quot;no&quot;&gt; &lt;p&gt;How clean is your house (Rated 1-3 with 3 being cleanest))&lt;/p&gt; &lt;select name=&quot;stars&quot;&gt; &lt;option value=&quot;Great&quot;&gt;3&lt;/option&gt; &lt;option value=&quot;Okay&quot;&gt;2&lt;/option&gt; &lt;option value=&quot;Bad&quot;&gt;1&lt;/option&gt; &lt;/select&gt; &lt;p&gt;Any other comments?&lt;/p&gt; &lt;textarea name=&quot;name&quot; rows=&quot;8&quot; cols=&quot;80&quot;&gt;&lt;/textarea&gt; &lt;input type=&quot;submit&quot; name=&quot;&quot; value=&quot;Submit Feedback&quot;&gt; &lt;/form&gt; . . &lt;select&gt; gives a dropdown selection of &lt;option&gt;s. Each option has a value. The value of the option selected will be assigned to name (variable name) of the &lt;select&gt; and the backend can see name = value for this dropdown. . &lt;textarea&gt; is a big text box which can be set with # rows and columns. . Note that &lt;submit&gt;’s value is just the string shown on the submit button. . Once hit submit, the URL will be updated and a part in the format ?name=value&amp;name=value&amp;name=value will be appended. . 3. CSS Crash Course . CSS = Cascading Style Sheet . CSS controls the color, background, borders and much more. . Create a .css file | Use CSS syntax to link element tags | Add style name-value pairs | Connect CSS to HTML | 3.1. Colors . Example: (from Part1_master/css) . /*Colors can be names, or codes*/ h1{ color: blue; } li { color: rgb(0,200,0); } /*Search Google for hex color, it has a hex color picker*/ p{ color: #000000; } /*a is alpha, controls transparency, 1 is fully opaque, 0 fully transparent*/ h4{ color: rgba(13,90,140,0.5) } . The general format is shown below, don’t forget the ; . Selected Tag { property: value; } . To link the CSS file to HTML, add the following in the &lt;head&gt; section to the HTML. . &lt;link rel=&quot;stylesheet&quot; href=&quot;Part1_master.css&quot;&gt; . rel is the relationship attribute of the link, it says the CSS is a stylesheet of the HTML. . href points to the path of the CSS file. . The final result is shown below. . . 3.2. Backgrounds and Borders . Example: (from Part2_master.css) . . . background can be an url to an image, set no-repeat to avoid tiling. background-repeat can be repeat-x or repeat-y for x and y axis only. . For border, border-style and border-width are required attributes. Use one line to avoid 3 . border: orange 10px dashed; . Final result: . . 3.3. class and id: CSS Selector . This is the most important one for CSS. We can select by id or class. . Every HTML element can accept a class or id attribute. CSS can link to them by . . for class | # for id | . classs are for styling multiple different elements. . ids are for a single and unique element. . Example: from CSS Part3 . . . Later, Bootstap will define classes for us. . To summarize, CSS can style the HTML based on tags, classes and ids. . 3.4. Inspect Elements in Browser . In Chrome we can inspect the HTML and CSS in the developer tool. We can even edit it locally to see changes. For example, open Google and change it’s styling locally. . To go back to the original site, just hit refresh. . 3.5. Fonts . Not every font is available on each OS. Mac, Windows and Linux have different fonts. . Use Google Fonts API to change fonts. . Add a link to Google fonts API in the HTML | Add the name for the font-family from Google Fonts API. | You can get the link and name from the Google Fonts webpage. . Example: look at CSS Part5 files . 4. Bootstrap 4 . Bootstrap is a CSS framework originally developed at Twitter for internal use. It was open sourced in 2011 and became one of the most starred projects on Github. . What is Bootstrap? . Conceptually, Bootstrap is a really large CSS file + a really large JS file. . Check out the documentation and templates . This is a template for a dashboard. . . Key concepts: bootstrap components and classes . Linking Bootstrap | Containers | Jumbotrons | Buttons | . 4.1. Buttons . In the &lt;head&gt; section in the HTML, . Copy and paste the CSS link | . &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot; integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin=&quot;anonymous&quot;&gt; . Copy and paste the jQuery link | . &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js&quot; integrity=&quot;sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&quot; integrity=&quot;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; . Add containers next. The containers are responsive and can self-adjust the position based on browser size on different devices. . Then add a button. Go to Bootstrap -&gt; components -&gt; buttons, copy and paste the code there, mainly need the class names e.g. btn btn-primary. . &lt;button class=&quot;btn btn-success btn-lg active&quot; type=&quot;button&quot; name=&quot;button&quot;&gt;Button&lt;/button&gt; . Same for other components. Be comfortable searching the Component section and copy paste around. . . 4.1.1. Class jumbotron . A showcase message for the website. . Example: . &lt;!-- JumboTron --&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;jumbotron&quot;&gt; &lt;!-- &lt;div class=&quot;container&quot;&gt; --&gt; &lt;h1 class=&quot;display-3&quot;&gt;Hello, world!&lt;/h1&gt; &lt;p class=&quot;lead&quot;&gt;This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.&lt;/p&gt; &lt;hr class=&quot;my-2&quot;&gt; &lt;p&gt;It uses utility classes for typography and spacing to space content out within the larger container.&lt;/p&gt; &lt;p class=&quot;lead&quot;&gt; &lt;a class=&quot;btn btn-primary btn-lg &quot; href=&quot;#&quot; role=&quot;button&quot;&gt;Learn more&lt;/a&gt; &lt;/p&gt; &lt;!-- &lt;/div&gt; --&gt; &lt;/div&gt; &lt;/div&gt; . . 4.2. Forms . In &lt;head&gt; include . &lt;!-- Bootstrap CSS, JS, and jQuery --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css&quot; integrity=&quot;sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js&quot; integrity=&quot;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js&quot; integrity=&quot;sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; . Bootstrap 4 makes forms look really well. . . All of these form components such as email submission, password, dropdown select, multiple select, text area, file upload, radio button, check button should use proper div, select and input with bootstrap class names. Refer to Part2_Forms.html for actual HTML code for each component. . 4.3. Navbar . HTML tag &lt;nav&gt; creates a navigation bar. Bootstrap classes can be added to it to add styling and functionality. It even makes it a dropdown menu on small screens of mobile devices. . Refer to Part3_Navbar.html for code examples. One thing to note is that we need jQuery uncompressed or minified, not slim or slim minified as in Bootstrap. Go to the jQuery website and get the link for minified . &lt;script src=&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot; integrity=&quot;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; . The reason is that the slim version of jQuery from Bootstrap sometimes has problems for the collapse functionality for certain browsers. . Check the documentation for further customizations as needed. . The End . This is a quick crash course for HTML, CSS, and Bootstrap. . For further frontend knowledge, check out the courses below . The Complete Web Developer in 2019: Zero to Mastery by Andrei Neagoie | React - The Complete Guide (incl Hooks, React Router, Redux) by Maximilian Schwarzmüller | .",
            "url": "http://blog.logancyang.com/note/fullstack/flask/2019/07/08/flask-frontend.html",
            "relUrl": "/note/fullstack/flask/2019/07/08/flask-frontend.html",
            "date": " • Jul 8, 2019"
        }
        
    
  
    
        ,"post3": {
            "title": "Flask Full Stack Part 3: Flask and SQL Database Walkthrough",
            "content": "This is the note for the Flask course by Jose Portilla on Udemy. . Python and Flask can connect to a variety of SQL database engines, including PostgreSQL, MySQL, SQLite, and a lot more. . SQLite is a simple SQL database engine that comes with Flask, usually it can handle all the needs for a small application with daily hits around 100K. It can also handle more, it’s not a hard cap. . To connect Python code to SQL code, use ORM (Object Relational Mapper). The most common is SQLAlchemy. Flask-SQLAlchemy is an extension to connect Flask to SQLAlchemy. . pip install Flask-SQLAlchemy . Getting Started . We need the following steps . Set up SQLite database in a Flask app | Create a model in the Flask app | Perform basic CRUD on our model | . Here we will show the script for manual CRUD to help understand the concepts. In practice, Flask automates all these. . Use CLI tool to make database. Refer to BasicModelApp.py to check the model definition, and SetUpDatabase.py to see db creation script (usually db creation is through CLI). . A summary of model class definition: . define __tablename__ | define column variables as class variables such as id, name, age, etc. | define __init__(self, ...) method. Note that id is automatically set and it does not need to be in __init__() | define __repr__(self) method | (optional) if there is a relationship to another model/table, use db.relationship(&#39;&lt;another_model&gt;&#39;, backref=&#39;&lt;this_model&gt;&#39;, lazy=&#39;dynamic&#39;) | . To add a row to the db, . db.session.add(&lt;row_obj&gt;) db.session.commit() . For SQLite and SQLAlchemy, integer id gets added automatically and starts at 1. The .sqlite file is the database, it’s encoded and is not readable by a text editor. . CRUD example: . from BasicModelApp import db,Puppy ########################### ###### CREATE ############ ######################### my_puppy = Puppy(&#39;Rufus&#39;,5) db.session.add(my_puppy) db.session.commit() ########################### ###### READ ############## ######################### # Note lots of ORM filter options here. # filter(), filter_by(), limit(), order_by(), group_by() # Also lots of executor options # all(), first(), get(), count(), paginate() all_puppies = Puppy.query.all() # list of all puppies in table print(all_puppies) print(&#39; n&#39;) # Grab by id puppy_one = Puppy.query.get(1) print(puppy_one) print(puppy_one.age) print(&#39; n&#39;) # Filters puppy_sam = Puppy.query.filter_by(name=&#39;Sammy&#39;) # Returns list print(puppy_sam) print(&#39; n&#39;) ########################### ###### UPDATE ############ ######################### # Grab your data, then modify it, then save the changes. first_puppy = Puppy.query.get(1) first_puppy.age = 10 db.session.add(first_puppy) db.session.commit() ########################### ###### DELETE ############ ######################### second_pup = Puppy.query.get(2) db.session.delete(second_pup) db.session.commit() # Check for changes: all_puppies = Puppy.query.all() # list of all puppies in table print(all_puppies) . Flask Migrate: Database Migration . When there are new columns to be added, only updating the model.py file won’t update the database. We need database migration. . To install, . pip install Flask-Migrate . To import, . from flask_migrate import Migrate . To use Flask Migrate, the first thing is to set the FLASK_APP variable. On Linux/Mac it goes, . export FLASK_APP=&lt;myapp.py&gt; . then import Migrate from flask_migrate, and add the line below before the class definition code. . # Add on migration capabilities in order to run terminal commands Migrate(app,db) . Migration steps: . # Set up the migration directory flask db init # Add some changes to the model class, e.g. add a column # Set up the migration file. Similar to git commit flask db migrate -m &quot;&lt;some message&gt;&quot; # Update the database with the migration flask db upgrade . Flask Relationships . For multiple models (tables), we need “relationships” to link them together. Some concepts: . Primary Key: unique identifier for a row | Foreigh Key: the column that’s another table’s primary key | . The key is to define db.relationship(...) to point a class variable x in &lt;parent_table&gt; (column) to another table. x is defined as db.Column(db.&lt;var_type&gt;, db.ForeignKey(&#39;&lt;parent_table.column&gt;&#39;)) in the other table. &lt;parent_table&gt; does not reference to other tables, other tables reference to it by having a column of &lt;parent_table&gt;’s primary key as db.ForeignKey. . Code example below . class Puppy(db.Model): __tablename__ = &#39;puppies&#39; id = db.Column(db.Integer,primary_key = True) name = db.Column(db.Text) # This is a one-to-many relationship # A puppy can have many toys toys = db.relationship(&#39;Toy&#39;,backref=&#39;puppy&#39;,lazy=&#39;dynamic&#39;) # This is a one-to-one relationship # A puppy only has one owner, thus uselist is False. # Strong assumption of 1 dog per 1 owner and vice versa. owner = db.relationship(&#39;Owner&#39;,backref=&#39;puppy&#39;,uselist=False) def __init__(self,name): # Note how a puppy only needs to be initalized with a name! self.name = name def __repr__(self): if self.owner: return f&quot;Puppy name is {self.name} and owner is {self.owner.name}&quot; else: return f&quot;Puppy name is {self.name} and has no owner assigned yet.&quot; def report_toys(self): print(&quot;Here are my toys!&quot;) for toy in self.toys: print(toy.item_name) class Toy(db.Model): __tablename__ = &#39;toys&#39; id = db.Column(db.Integer,primary_key = True) item_name = db.Column(db.Text) # Connect the toy to the puppy that owns it. # We use puppies.id because __tablename__=&#39;puppies&#39; puppy_id = db.Column(db.Integer,db.ForeignKey(&#39;puppies.id&#39;)) def __init__(self,item_name,puppy_id): self.item_name = item_name self.puppy_id = puppy_id class Owner(db.Model): __tablename__ = &#39;owners&#39; id = db.Column(db.Integer,primary_key= True) name = db.Column(db.Text) # We use puppies.id because __tablename__=&#39;puppies&#39; puppy_id = db.Column(db.Integer,db.ForeignKey(&#39;puppies.id&#39;)) def __init__(self,name,puppy_id): self.name = name self.puppy_id = puppy_id . Note that one-to-one relationship has uselist=False. Default is uselist=True i.e. one-to-many, if not specified. . lazy=&#39;dynamic&#39; is a more advanced usage. Leave it as it for now. . . Schema: . Table puppies: id, name (parent table) . Table toys: id, item_name, puppy_id (foreign key, refers to puppies.id) . Table owners: id, name, puppy_id (foreign key, refers to puppies.id) . . Now we experiment with adding some records with relationships. . from models import db,Puppy,Owner,Toy # Create 2 puppies rufus = Puppy(&quot;Rufus&quot;) fido = Puppy(&quot;Fido&quot;) # Add puppies to database db.session.add_all([rufus,fido]) db.session.commit() # Check with a query, this prints out all the puppies! print(Puppy.query.all()) # Grab Rufus from database # Grab all puppies with the name &quot;Rufus&quot;, returns a list, so index [0] # Alternative is to use .first() instead of .all()[0] rufus = Puppy.query.filter_by(name=&#39;Rufus&#39;).all()[0] # Create an owner to Rufus # Owner __init__ takes in name and foreign key Puppy id which is unique jose = Owner(&quot;Jose&quot;,rufus.id) # Give some Toys to Rufus # Toy __init__ takes in item name and foreign key Puppy id which is unique toy1 = Toy(&#39;Chew Toy&#39;,rufus.id) toy2 = Toy(&quot;Ball&quot;,rufus.id) # Commit these changes to the database # Note that all_all can take different types of objects at once!! db.session.add_all([jose,toy1,toy2]) db.session.commit() # Let&#39;s now grab rufus again after these additions rufus = Puppy.query.filter_by(name=&#39;Rufus&#39;).first() print(rufus) # Output: # Puppy name is Rufus and owner is Jose # Show toys print(rufus.report_toys()) # Output: # Chew Toy # Ball # You can also delete things from the database: find_pup = Puppy.query.get(1) db.session.delete(find_pup) db.session.commit() # But note that if deleted, do not try to delete again, or it will error . Connect to Flask Template - Databases in Views . Refer to “03-Databases-in-Views” folder for a complete puppy adoption site example from scratch. . A view function is just a function with app.route in Flask, it responds to client requests. . First, create the site.py or app.py, then the necessary files such as forms.py and models.py. Next, create the templates folder and base.html in it, add necessary html files such as home.html, add.html, delete.html, etc. . Then add the model classes for the database same as in the last section. . The next step is to add @app.routes functions to the form view, such as . @app.route(&#39;/add&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;]) def add_pup(): form = AddForm() if form.validate_on_submit(): name = form.name.data new_pup = Puppy(name) db.session.add(new_pup) db.session.commit() return redirect(url_for(&#39;list_pup&#39;)) return render_template(&#39;add.html&#39;, form=form) . and other views such as /list and /delete. Refer to example in the code folder. .",
            "url": "http://blog.logancyang.com/note/fullstack/flask/2019/07/08/flask-db.html",
            "relUrl": "/note/fullstack/flask/2019/07/08/flask-db.html",
            "date": " • Jul 8, 2019"
        }
        
    
  
    
        ,"post4": {
            "title": "How to Create Keyword List Entities in spaCy (v2.1)",
            "content": "Sometimes there is a need to create keyword entities from a list of known keywords, e.g. country names, species, brands, etc. The list can be large. This note shows how to create such entities in spaCy and make it work with a trained NER model. . Rule Based Matcher . PhraseMatcher is useful if you already have a large terminology list or gazetteer consisting of single or multi-token phrases that you want to find exact instances of in your data. As of spaCy v2.1.0, you can also match on the LOWER attribute for fast and case-insensitive matching. . Matcher is about individual tokens. For example, you can find a noun, followed by a verb with the lemma “love” or “like”, followed by an optional determiner and another token that’s at least ten characters long. . PhraseMatcher is what we need. . Say we have several brand names, . [u&quot;Armani&quot;, u&quot;Ralph Lauren&quot;, u&quot;Monique Lhuillier&quot;, u&quot;Norma Kamali&quot;] . Assume we have some text messages in which we find these brand names. We apply the trained NER model on these messages to make predictions. To make this case insensitive, use attr=&quot;LOWER&quot;, . from spacy.lang.en import English from spacy.matcher import PhraseMatcher nlp = English() matcher = PhraseMatcher(nlp.vocab, attr=&quot;LOWER&quot;) patterns = [ nlp.make_doc(name) for name in [u&quot;Armani&quot;, u&quot;Ralph Lauren&quot;, u&quot;Monique Lhuillier&quot;, u&quot;Norma Kamali&quot;] ] matcher.add(&quot;Brands&quot;, None, *patterns) doc = nlp(u&quot;armani and monique Lhuillier are both brands&quot;) for match_id, start, end in matcher(doc): print(&quot;Matched based on lowercase token text:&quot;, doc[start:end]) # output: # Matched based on lowercase token text: armani # Matched based on lowercase token text: monique Lhuillier . It can even match number entities by shape, attr=&quot;SHAPE&quot;, e.g. IP addresses. . Combine with Model Prediction: Use Entity Ruler and Pattern File (v2.1) . PhraseMatcher doesn’t address the need to combine rules with statistical models. The rules must have influence on the prediction process or they will have conflicts. . Citing the spaCy docs, “The entity ruler is designed to integrate with spaCy’s existing statistical models and enhance the named entity recognizer. If it’s added before the &quot;ner&quot; component, the entity recognizer will respect the existing entity spans and adjust its predictions around it. This can significantly improve accuracy in some cases. If it’s added after the &quot;ner&quot; component, the entity ruler will only add spans to the doc.ents if they don’t overlap with existing entities predicted by the model. To overwrite overlapping entities, you can set overwrite_ents=True on initialization.” . from spacy.lang.en import English from spacy.pipeline import EntityRuler # Before training nlp = English() &quot;&quot;&quot;This is the hard-coded ruler ruler = EntityRuler(nlp) patterns = [{&quot;label&quot;: &quot;ORG&quot;, &quot;pattern&quot;: &quot;Apple&quot;}, {&quot;label&quot;: &quot;GPE&quot;, &quot;pattern&quot;: [{&quot;lower&quot;: &quot;san&quot;}, {&quot;lower&quot;: &quot;francisco&quot;}]}] ruler.to_disk(&quot;./patterns.jsonl&quot;) ruler.add_patterns(patterns) &quot;&quot;&quot; # Loading ruler from jsonl file ruler = EntityRuler(nlp).from_disk(&quot;./patterns.jsonl&quot;) nlp.add_pipe(ruler) # Add NER training / transfer learning code here... # At prediction time doc = nlp(u&quot;Apple is opening its first big office in San Francisco.&quot;) print([(ent.text, ent.label_) for ent in doc.ents]) . Question: Since the pattern file is a list of patterns, it must be slow to go through the list every time to check whether something is a brand. What’s the solution? . Case Study: Brand Entity . Brand is an example where the keyword list / pattern file can be really large. There are already many labeled brand entities in the training data so the model may or may not find correct brand entities at prediction time. In the case of an incorrect prediction, how do we leverage the rule-based method to correct it? . Note that we prefer adding the EntityRuler before the &quot;ner&quot; component to let the model respect the keyword list and adjust its predictions. . Case 1: Predicted entity is not in the keyword list and has no word overlap with any item in the list. . In this case, it is either a wrong prediction or a new brand entity correctly predicted but is not in the training data. These cases need to be logged and checked by a human. If confirmed it IS a correct new brand entity, it should be added to the brand keyword list. . Case 2: Predicted entity is not in the keyword list BUT has overlap with one or more items in the list. . If EntityRuler is used, the model prediction should be able to find the complete brand name in the text, so any such overlap should be the case where only part of the brand name is there in the text but no complete name from the brand list is present. This is sometimes OK, people don’t necessarily call out the complete brand name but only refer to it with a short form. In other cases, this is a wrong prediction. Again, human check is preferred. . Case 3: Predicted entity is in the keyword list . This is the trivial case where the model is doing a perfect job. . (For more advanced usages involving dependency parsing, check here for examples. This is beyond the scope of this post about keyword list entities.) .",
            "url": "http://blog.logancyang.com/note/spacy/nlp/2019/06/07/keyword-entity.html",
            "relUrl": "/note/spacy/nlp/2019/06/07/keyword-entity.html",
            "date": " • Jun 7, 2019"
        }
        
    
  
    
        ,"post5": {
            "title": "How to setup local GPU server for fast.ai",
            "content": "Fast.ai is the best coder’s guide to practical deep learning. This is a guide to its environment setup on a Linux server with NVIDIA GPU. . Server setup: GPU driver and CUDA . If you have an Nvidia GPU on your Linux machine, great! Let’s install the necessary components for deep learning. . Preparation . Install some useful packages . sudo apt-get update sudo apt-get install aptitude freeglut3-dev g++-4.8 gcc-4.8 libglu1-mesa-dev libx11-dev libxi-dev libxmu-dev nvidia-modprobe python-dev python-pip python-virtualenv vim . Install CUDA . Download CUDA installation file: https://developer.nvidia.com/cuda-downloads . Choose Linux -&gt; x86_64 -&gt; Ubuntu -&gt; 14.04 -&gt; deb (local) -&gt; Download . Install CUDA in terminal (use the specific .deb file you’ve downloaded): . cd ~/Downloads sudo dpkg -i cuda-repo-ubuntu1404-8-0-local-ga2_8.0.61-1_amd64.deb sudo apt-get update sudo apt-get install cuda . Restart the computer to activate CUDA driver. Now your screen resolution should be automatically changed to highest resolution for the display! . Install cuDNN . The NVIDIA CUDA® Deep Neural Network library (cuDNN) is aGPU-accelerated library of primitives for deep neural networks with optimizations for convolutions etc. . Register an (free) acount on NVIDIA website and login to download the latest cuDNN library: https://developer.nvidia.com/cudnn . Choose the specific version of cuDNN (denpending on support of your prefered deep learning framework) . Choose Download cuDNN v5.1 (Jan 20, 2017), for CUDA 8.0 -&gt; cuDNN v5.1 Library for Linux . Install cuDNN (by copying files :) in terminal: . cd ~/Downloads tar xvf cudnn-8.0-linux-x64-v5.1.tgz cd cuda sudo cp lib64/* /usr/local/cuda/lib64/ sudo cp include/cudnn.h /usr/local/cuda/include/ sudo chmod a+r /usr/local/cuda/lib64/libcudnn* . Update your .bashrc . Add the following lines to your ~/.bashrc file (you can open it by gedit ~/.bashrc in terminal) . export PATH=/usr/local/cuda/bin:$PATH export MANPATH=/usr/local/cuda/man:$MANPATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc . To check the installation, print some GPU and driver information by: . nvidia-smi nvcc --version . Note: Haven’t been using my gpu server for a while and when I started Ubuntu in Jan 2020, the NVidia driver stopped working. First of all, the display resolution was messed up and I had to perform actions from my other machine via ssh. I had to update the driver but there were some hoops to jump through. There were some broken dependencies and I needed . sudo aptitude install &lt;name_of_package_with_conflicts&gt; . to be able to run . sudo ubuntu-drivers autoinstall . reference: https://askubuntu.com/questions/1077493/unable-to-install-nvidia-drivers-on-ubuntu-18-04 . Server Setup: Conda . Install Anaconda . cd /tmp curl -O https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh sha256sum Anaconda3-2019.03-Linux-x86_64.sh # output # 45c851b7497cc14d5ca060064394569f724b67d9b5f98a926ed49b834a6bb73a Anaconda3-2019.03-Linux-x86_64.sh bash Anaconda3-2019.03-Linux-x86_64.sh . You’ll receive the following output to review the license agreement by pressing ENTER until you reach the end. . # Output Welcome to Anaconda3 2019.03 In order to continue the installation process, please review the license agreement. Please, press ENTER to continue &gt;&gt;&gt; ... Do you approve the license terms? [yes|no] . When you get to the end of the license, type yes as long as you agree to the license to complete installation. . Once you agree to the license, you will be prompted to choose the location of the installation. You can press ENTER to accept the default location, or specify a different location. . Once installation is complete and ran conda init, the following code is added to .bashrc. If you use zsh, add it to .zshrc. . # &gt;&gt;&gt; conda initialize &gt;&gt;&gt; # !! Contents within this block are managed by &#39;conda init&#39; !! __conda_setup=&quot;$(&#39;/home/loganyc/anaconda3/bin/conda&#39; &#39;shell.bash&#39; &#39;hook&#39; 2&gt; /dev/null)&quot; if [ $? -eq 0 ]; then eval &quot;$__conda_setup&quot; else if [ -f &quot;/home/loganyc/anaconda3/etc/profile.d/conda.sh&quot; ]; then . &quot;/home/loganyc/anaconda3/etc/profile.d/conda.sh&quot; else export PATH=&quot;/home/loganyc/anaconda3/bin:$PATH&quot; fi fi unset __conda_setup # &lt;&lt;&lt; conda initialize &lt;&lt;&lt; . Use the conda command to test the installation and activation: . conda list . To setup conda environment, . conda create --name my_env python=3 conda activate my_env . To deactivate conda env . conda deactivate . (Note if you use zsh, there can be a (base) shown as the default conda environment.) . Server Setup: fast.ai . git clone https://github.com/fastai/course-v3 conda update conda conda install -c pytorch -c fastai fastai pytorch torchvision cuda92 jupyter cd course-v3/nbs/dl1 jupyter notebook . In your terminal, and you can access the notebook at localhost:8888. . If going to localhost:8888 doesn’t work, or asks for a password/token return to your terminal window and look for this message after you typed ‘jupyter notebook’: “Copy/paste this URL into your browser when you connect for the first time, to login with a token:” . Copy and paste that URL into your browser, and this should connect you to your jupyter notebook. . Go back to the first page to see how to use this jupyter notebook and run the jupyter notebook tutorial. Come back here once you’re finished and don’t forget to stop your instance with the next step. . If you have any problem while using the fastai library try running . conda install -c fastai fastai . Note that in Ubuntu terminal, use ctrl+ to stop the notebook server. . GPU vs. CPU for Deep Learning Test . Try running this inside a Jupyter Notebook: . Cell [1]: . import torch t_cpu = torch.rand(500,500,500) %timeit t_cpu @ t_cpu # Output # 785 ms ± 14.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) . Cell [2]: . t_gpu = torch.rand(500,500,500).cuda() %timeit t_gpu @ t_gpu # Output # 18.7 ms ± 376 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . Set up SSH connection . Server side, install SSH server: . sudo apt-get install openssh-server . Edit SSH configuration to whitelist users: . sudo vim /etc/ssh/sshd_config . Change root login permission line to: PermitRootLogin no . Add allow users: AllowUsers &lt;your_username&gt; . Then restart SSH server: . sudo /etc/init.d/ssh restart sudo ufw allow 22 . Client side, to connect with the workstation, you need to firstly know the server’s IP (or hostname if it has one). Use ifconfig -a on the server to check IP address (look for that in eth0). . Client side (Mac OS), you need to whitelist the server IP in /etc/hosts: . sudo vim /etc/hosts . Add line &lt;server IP&gt; &lt;server hostname&gt; . Port Forwarding to Acess Jupyter Notebook (LAN) . Within the home network, access the Jupyter Notebook on the Linux GPU server from a client machine’s browser by running . ssh -fNL 8888:local:8888 &lt;username_on_server&gt;@&lt;server_ip&gt; . and go to localhost:8888/tree in your browser. . Setup Remote SSH Access (WAN/Internet) . In my case, my Ubuntu machine with GPU sits at home behind a Verizon Fios router. I can directly ssh into it in my home network (LAN) but doing so from outside requires several additional steps. . Configure Router for Port Forwarding . For Verison Fios routers, go to 192.168.1.1 to access the router setting. In my case, the username is admin and the password is printed on my router. . In the page, find port forwarding, set source port to be ANY, destination port to be your custom port, say 2222, and the port forward to is 22 which is the port on the box at which ssh is listening. Then click add. Done! . SSH from Remote . Now, to log onto the box from outside, run . ssh &lt;username&gt;@&lt;your_router_ip&gt; -p 2222 . To simplify this, add a blob in ~/.ssh/config. . Host deeplearningbox HostName &lt;router_public_ip&gt; User &lt;username_on_deeplearningbox&gt; . Now you can run ssh deeplearningbox -p 2222 . Setup Jupyter Notebook Server for Remote Access . With remote ssh setup, now we setup Jupyter Notebook. . jupyter notebook --generate-config . which will generate jupyter_notebook_config.py in ~/.jupyter. . Then generate certfile and key as: . $ cd ~/.jupyter $ openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mykey.key -out mycert.pem . Launch Python and run the following lines: . In [1]: from notebook.auth import passwd In [2]: passwd() Enter password: Verify password: Out[2]: &#39;sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed&#39; . After that, edit the jupyter_notebook_config.py as following: . c.NotebookApp.password = u&#39;sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed&#39; # Set options for certfile, ip, password, and toggle off browser auto-opening c.NotebookApp.certfile = u&#39;/absolute/path/to/your/certificate/mycert.pem&#39; c.NotebookApp.keyfile = u&#39;/absolute/path/to/your/certificate/mykey.key&#39; c.NotebookApp.ip = &#39;0.0.0.0&#39; c.NotebookApp.open_browser = False # It is a good idea to set a known, fixed port for server access c.NotebookApp.port = 8888 . Now, start jupyter notebook on the deep learning workstation and log in by . ssh -fNL 8888:localhost:8888 deeplearningbox -p 2222 . Note that visit https://localhost:8888 instead of http on the client computer. . Side Note: Github HTTPS . Since I have 2FA authentication for my github account, using https as remote url for my repo needs “personal access token” which serves as password when pushing. Refer to this for setup. . Using SSH instead of HTTPS is another option. But when the computer has two or more github account, setting up more key pairs and making things work is just too much. Since I prefer using my MBP (the machine with multiple Github accounts) over the Linux box for coding, sticking with HTTPS for the mac. . Side Note: SSH Port Forwarding Concepts . I’m a visual person. I found the answer here helpful for explaining different types of port forwarding. . References . https://course.fast.ai/start_aws.html | https://github.com/charlesq34/DIY-Deep-Learning-Workstation | https://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot | https://superuser.com/questions/869417/port-forwarding-not-working-on-verizon-fios-router | https://fzhu.work/blog/python/remote-ipython-notebook-setup.html | https://tuatini.me/part-2-how-to-setup-your-own-environment-for-deep-learning-for-remote/ | https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line | .",
            "url": "http://blog.logancyang.com/note/fastai/2019/05/27/fastai-gpu-setup.html",
            "relUrl": "/note/fastai/2019/05/27/fastai-gpu-setup.html",
            "date": " • May 27, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Logan (Chao) Yang, a machine learning engineer and creative coder. . My main interests are machine learning, physics simulation, math animation and music production. This is my fastpages blog for notes, code, Jupyter notebooks, and essays. . I share my sketches, simulations and videos at my personal website. . Feel free to connect with me on LinkedIn. . I also publish on Medium, and share new progresses on Twitter. .",
          "url": "http://blog.logancyang.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://blog.logancyang.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}